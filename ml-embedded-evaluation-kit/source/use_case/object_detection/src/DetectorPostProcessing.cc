#include "DetectorPostProcessing.h"
#include <algorithm>
#include <cmath>
#include <stdint.h>
#include <forward_list>


typedef enum
{
	MONO_FRAME=0,
	RAWBAYER_FRAME,
	YUV_FRAME
}enum_frameFormat;


typedef struct
{
    uint32_t x;
    uint32_t y;
    uint32_t width;
    uint32_t height;
}struct__box;

typedef struct
{
	struct__box bbox;
    uint32_t time_of_existence;
    uint32_t is_reliable;
}struct_MotionTarget;



typedef struct
{
	struct__box upper_body_bbox;
    uint32_t upper_body_scale;
    uint32_t upper_body_score;
    uint32_t upper_body_num_frames_since_last_redetection_attempt;
    struct__box head_bbox;
    uint32_t head_scale;
    uint32_t head_score;
    uint32_t head_num_frames_since_last_redetection_attempt;
    uint32_t octave;
    uint32_t time_of_existence;
    uint32_t isVerified;
}struct_Human;


typedef struct boxabs {
    float left, right, top, bot;
} boxabs;


typedef struct branch {
    int resolution;
    int num_box;
    float *anchor;
    int8_t *tf_output;
    float scale;
    int zero_point;
    size_t size;
    float scale_x_y;
} branch;

typedef struct network {
    int input_w;
    int input_h;
    int num_classes;
    int num_branch;
    branch *branchs;
    int topN;
} network;


typedef struct box {
    float x, y, w, h;
} box;

typedef struct detection{
    box bbox;
    float *prob;
    float objectness;
} detection;



static int sort_class;

void free_dets(std::forward_list<detection> &dets){
    std::forward_list<detection>::iterator it;
    for ( it = dets.begin(); it != dets.end(); ++it ){
        free(it->prob);
    }
}

float sigmoid(float x)
{
    return 1.f/(1.f + exp(-x));
} 

bool det_objectness_comparator(detection &pa, detection &pb)
{
    return pa.objectness < pb.objectness;
}

void insert_topN_det(std::forward_list<detection> &dets, detection det)
{
    std::forward_list<detection>::iterator it;
    std::forward_list<detection>::iterator last_it;
    for ( it = dets.begin(); it != dets.end(); ++it ){
        if(it->objectness > det.objectness)
            break;
        last_it = it;
    }
    if(it != dets.begin()){
        dets.emplace_after(last_it, det);
        free(dets.begin()->prob);
        dets.pop_front();
    }
    else{
        free(det.prob);
    }
}

std::forward_list<detection> get_network_boxes(network *net, int image_w, int image_h, float thresh, int *num)
{
    std::forward_list<detection> dets;
    int i;
    int num_classes = net->num_classes;
    *num = 0;

    for (i = 0; i < net->num_branch; ++i) {
        int height  = net->branchs[i].resolution;
        int width = net->branchs[i].resolution;
        int channel  = net->branchs[i].num_box*(5+num_classes);

        for (int h = 0; h < net->branchs[i].resolution; h++) {
            for (int w = 0; w < net->branchs[i].resolution; w++) {
                for (int anc = 0; anc < net->branchs[i].num_box; anc++) {
                    
                    // objectness score
                    int bbox_obj_offset = h * width * channel + w * channel + anc * (num_classes + 5) + 4;
                    float objectness = sigmoid(((float)net->branchs[i].tf_output[bbox_obj_offset] - net->branchs[i].zero_point) * net->branchs[i].scale);

                    if(objectness > thresh){
                        detection det;
                        det.prob = (float*)calloc(num_classes, sizeof(float));
                        det.objectness = objectness;
                        //get bbox prediction data for each anchor, each feature point
                        int bbox_x_offset = bbox_obj_offset -4;
                        int bbox_y_offset = bbox_x_offset + 1;
                        int bbox_w_offset = bbox_x_offset + 2;
                        int bbox_h_offset = bbox_x_offset + 3;
                        int bbox_scores_offset = bbox_x_offset + 5;
                        //int bbox_scores_step = 1;
                        det.bbox.x = ((float)net->branchs[i].tf_output[bbox_x_offset] - net->branchs[i].zero_point) * net->branchs[i].scale;
                        det.bbox.y = ((float)net->branchs[i].tf_output[bbox_y_offset] - net->branchs[i].zero_point) * net->branchs[i].scale;
                        det.bbox.w = ((float)net->branchs[i].tf_output[bbox_w_offset] - net->branchs[i].zero_point) * net->branchs[i].scale;
                        det.bbox.h = ((float)net->branchs[i].tf_output[bbox_h_offset] - net->branchs[i].zero_point) * net->branchs[i].scale;
                        

                        float bbox_x, bbox_y;

                        // Eliminate grid sensitivity trick involved in YOLOv4
                        bbox_x = sigmoid(det.bbox.x); //* net->branchs[i].scale_x_y - (net->branchs[i].scale_x_y - 1) / 2;
                        bbox_y = sigmoid(det.bbox.y); //* net->branchs[i].scale_x_y - (net->branchs[i].scale_x_y - 1) / 2;
                        det.bbox.x = (bbox_x + w) / width;
                        det.bbox.y = (bbox_y + h) / height;

                        det.bbox.w = exp(det.bbox.w) * net->branchs[i].anchor[anc*2] / net->input_w;
                        det.bbox.h = exp(det.bbox.h) * net->branchs[i].anchor[anc*2+1] / net->input_h;
                        
                        for (int s = 0; s < num_classes; s++) {
                            det.prob[s] = sigmoid(((float)net->branchs[i].tf_output[bbox_scores_offset + s] - net->branchs[i].zero_point) * net->branchs[i].scale)*objectness;
                            det.prob[s] = (det.prob[s] > thresh) ? det.prob[s] : 0;
                        }

                        //correct_yolo_boxes 
                        det.bbox.x *= image_w;
                        det.bbox.w *= image_w;
                        det.bbox.y *= image_h;
                        det.bbox.h *= image_h;

                        if (*num < net->topN || net->topN <=0){
                            dets.emplace_front(det);
                            *num += 1;
                        }
                        else if(*num ==  net->topN){
                            dets.sort(det_objectness_comparator);
                            insert_topN_det(dets,det);
                            *num += 1;
                        }else{
                            insert_topN_det(dets,det);
                        }
                    }
                }
            }
        }
    }
    if(*num > net->topN)
        *num -=1;
    return dets;
}

// init part

branch create_brach(int resolution, int num_box, float *anchor, int8_t *tf_output, size_t size, float scale, int zero_point)
{
    branch b;
    b.resolution = resolution;
    b.num_box = num_box;
    b.anchor = anchor;
    b.tf_output = tf_output;
    b.size = size;
    b.scale = scale;
    b.zero_point = zero_point;
    return b;
}

network creat_network(int input_w, int input_h, int num_classes, int num_branch, branch* branchs, int topN)
{
    network net;
    net.input_w = input_w;
    net.input_h = input_h;
    net.num_classes = num_classes;
    net.num_branch = num_branch;
    net.branchs = branchs;
    net.topN = topN;
    return net;
}

// NMS part

float overlap(float x1, float w1, float x2, float w2)
{
    float l1 = x1 - w1/2;
    float l2 = x2 - w2/2;
    float left = l1 > l2 ? l1 : l2;
    float r1 = x1 + w1/2;
    float r2 = x2 + w2/2;
    float right = r1 < r2 ? r1 : r2;
    return right - left;
}

float box_intersection(box a, box b)
{
    float w = overlap(a.x, a.w, b.x, b.w);
    float h = overlap(a.y, a.h, b.y, b.h);
    if(w < 0 || h < 0) return 0;
    float area = w*h;
    return area;
}

float box_union(box a, box b)
{
    float i = box_intersection(a, b);
    float u = a.w*a.h + b.w*b.h - i;
    return u;
}

float box_iou(box a, box b)
{
    float I = box_intersection(a, b);
    float U = box_union(a, b);
    if (I == 0 || U == 0) {
        return 0;
    }
    return I / U;
}

bool det_comparator(detection &pa, detection &pb)
{
    return pa.prob[sort_class] > pb.prob[sort_class];
}

void do_nms_sort(std::forward_list<detection> &dets, int classes, float thresh)
{
    int k;
    
    for (k = 0; k < classes; ++k) {
        sort_class = k;
        dets.sort(det_comparator);
        
        for (std::forward_list<detection>::iterator it=dets.begin(); it != dets.end(); ++it){
            if (it->prob[k] == 0) continue;
            for (std::forward_list<detection>::iterator itc=std::next(it, 1); itc != dets.end(); ++itc){
                if (itc->prob[k] == 0) continue;
                if (box_iou(it->bbox, itc->bbox) > thresh) {
                    itc->prob[k] = 0;
                }
            }
        }
    }
}


boxabs box_c(box a, box b) 
{
    boxabs ba;//
    ba.top = 0;
    ba.bot = 0;
    ba.left = 0;
    ba.right = 0;
    ba.top = fmin(a.y - a.h / 2, b.y - b.h / 2);
    ba.bot = fmax(a.y + a.h / 2, b.y + b.h / 2);
    ba.left = fmin(a.x - a.w / 2, b.x - b.w / 2);
    ba.right = fmax(a.x + a.w / 2, b.x + b.w / 2);
    return ba;
}


float box_diou(box a, box b)
{
    boxabs ba = box_c(a, b);
    float w = ba.right - ba.left;
    float h = ba.bot - ba.top;
    float c = w * w + h * h;
    float iou = box_iou(a, b);
    if (c == 0) {
        return iou;
    }
    float d = (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
    float u = pow(d / c, 0.6);
    float diou_term = u;

    return iou - diou_term;
}


void diounms_sort(std::forward_list<detection> &dets, int classes, float thresh)
{
    int k;
    
    for (k = 0; k < classes; ++k) {
        sort_class = k;
        dets.sort(det_comparator);
        
        for (std::forward_list<detection>::iterator it=dets.begin(); it != dets.end(); ++it){
            if (it->prob[k] == 0) continue;
            for (std::forward_list<detection>::iterator itc=std::next(it, 1); itc != dets.end(); ++itc){
                if (itc->prob[k] == 0) continue;
                if (box_diou(it->bbox, itc->bbox) > thresh) {
                    itc->prob[k] = 0;
                }
            }
        }
    }
}


static void inline check_and_fix_offset(int im_w,int im_h,int *offset) 
{
    
    if (!offset) return;    
    
    if ( (*offset) >= im_w*im_h*FORMAT_MULTIPLY_FACTOR)
        (*offset) = im_w*im_h*FORMAT_MULTIPLY_FACTOR -1;
    else if ( (*offset) < 0)
            *offset =0;    
    
}


void draw_box_on_image(uint8_t *img_in,int im_w,int im_h,int bx,int by,int bw,int bh) 
{
    
    if (!img_in) {
        return;
    }
    
    int offset=0;
    for (int i=0; i < bw; i++) {        
        /*draw two lines */
        for (int line=0; line < 2; line++) {
            /*top*/
            offset =(i + (by + line)*im_w + bx)*FORMAT_MULTIPLY_FACTOR;
            check_and_fix_offset(im_w,im_h,&offset);
            img_in[offset] = 0xFF;  /* FORMAT_MULTIPLY_FACTOR for rgb or grayscale*/
            /*bottom*/
            offset = (i + (by + bh - line)*im_w + bx)*FORMAT_MULTIPLY_FACTOR;
            check_and_fix_offset(im_w,im_h,&offset);
            img_in[offset] = 0xFF;    
        }                
    }
    
    for (int i=0; i < bh; i++) {
        /*draw two lines */
        for (int line=0; line < 2; line++) {
            /*left*/
            offset = ((i + by)*im_w + bx + line)*FORMAT_MULTIPLY_FACTOR;
            check_and_fix_offset(im_w,im_h,&offset);            
            img_in[offset] = 0xFF;
            /*right*/
            offset = ((i + by)*im_w + bx + bw - line)*FORMAT_MULTIPLY_FACTOR;
            check_and_fix_offset(im_w,im_h,&offset);            
            img_in[offset] = 0xFF;    
        }
    }

}



void runPostProcessing(uint8_t *img_in,TfLiteTensor* model_output[2],std::vector<arm::app::DetectionResult> & results_out)
{
       
    TfLiteTensor* output[2] = {nullptr,nullptr};
    int input_w = INPUT_IMAGE_WIDTH;
	int input_h = INPUT_IMAGE_HEIGHT;
  
    for(int anchor=0;anchor<2;anchor++)
    {
         output[anchor] = model_output[anchor];
    }

    /* init postprocessing 	 */
	int num_classes = 1;
	int num_branch = 2;
	int topN = 0;
		

	branch* branchs = (branch*)calloc(num_branch, sizeof(branch));

    /*NOTE: anchors are different for any given input model size, estimated during training phase */
	float anchor1[] = {38, 77, 47, 97, 61, 126};
    float anchor2[] = {14, 26, 19, 37, 28, 55 };


	branchs[0] = create_brach(INPUT_IMAGE_WIDTH/32, 3, anchor1, output[0]->data.int8, output[0]->bytes, ((TfLiteAffineQuantization*)(output[0]->quantization.params))->scale->data[0], ((TfLiteAffineQuantization*)(output[0]->quantization.params))->zero_point->data[0]);
		
	branchs[1] = create_brach(INPUT_IMAGE_WIDTH/16, 3, anchor2, output[1]->data.int8, output[1]->bytes, ((TfLiteAffineQuantization*)(output[1]->quantization.params))->scale->data[0],((TfLiteAffineQuantization*)(output[1]->quantization.params))->zero_point->data[0]);
		
	network net = creat_network(input_w, input_h, num_classes, num_branch, branchs,topN);
	/* end init */

	/* start postprocessing */
    int nboxes=0;
    float thresh = .5;//50%
    float nms = .45;
    int orig_image_width = ORIGINAL_IMAGE_WIDTH;
    int orig_image_height = ORIGINAL_IMAGE_HEIGHT;
    std::forward_list<detection> dets = get_network_boxes(&net, orig_image_width, orig_image_height, thresh, &nboxes);
    /* do nms */
    diounms_sort(dets, net.num_classes, nms);
	uint8_t temp_unsuppressed_counter = 0;
    int j;
    for (std::forward_list<detection>::iterator it=dets.begin(); it != dets.end(); ++it){
        float xmin = it->bbox.x - it->bbox.w / 2.0f;
        float xmax = it->bbox.x + it->bbox.w / 2.0f;
        float ymin = it->bbox.y - it->bbox.h / 2.0f;
        float ymax = it->bbox.y + it->bbox.h / 2.0f;

        if (xmin < 0) xmin = 0;
        if (ymin < 0) ymin = 0;
        if (xmax > orig_image_width) xmax = orig_image_width;
        if (ymax > orig_image_height) ymax = orig_image_height;

        float bx = xmin;
        float by = ymin;
        float bw = xmax - xmin;
        float bh = ymax - ymin;

        for (j = 0; j <  net.num_classes; ++j) {
            if (it->prob[j] > 0) {
                                              
                arm::app::DetectionResult tmp_result = {};
                
                tmp_result.m_normalisedVal = it->prob[j];
                tmp_result.m_x0=bx;
                tmp_result.m_y0=by;
                tmp_result.m_w=bw;
                tmp_result.m_h=bh;
                
                results_out.push_back(tmp_result);

                draw_box_on_image(img_in,orig_image_width,orig_image_height,bx,by,bw,bh);
                
                temp_unsuppressed_counter++;
            }
        }
    }

	free_dets(dets);
	free(branchs);
	    
}

void rgb_to_grayscale(const uint8_t *rgb,uint8_t *gray, int im_w,int im_h) 
{
    float R=0.299;
    float G=0.587; 
    float B=0.114; 
    for (int i=0; i< im_w*im_h; i++ ) {
                    
        uint32_t  int_gray = rgb[i*3 + 0]*R + rgb[i*3 + 1]*G+ rgb[i*3 + 2]*B;
        /*clip if need */
        if (int_gray <= UINT8_MAX) {
            gray[i] =  int_gray;
        } else {
            gray[i] = UINT8_MAX;
        }
            
    }

}



namespace arm {
namespace app {


namespace ssd {

// 17888 bytes
static float priors_arr[SSD_NUM_PRIORS][SSD_NUM_FEATURE_MAPS] = {
0.025, 0.0333333, 0.0625, 0.0833333,
0.025, 0.0333333, 0.1, 0.133333,
0.025, 0.0333333, 0.15, 0.2,
0.075, 0.0333333, 0.0625, 0.0833333,
0.075, 0.0333333, 0.1, 0.133333,
0.075, 0.0333333, 0.15, 0.2,
0.125, 0.0333333, 0.0625, 0.0833333,
0.125, 0.0333333, 0.1, 0.133333,
0.125, 0.0333333, 0.15, 0.2,
0.175, 0.0333333, 0.0625, 0.0833333,
0.175, 0.0333333, 0.1, 0.133333,
0.175, 0.0333333, 0.15, 0.2,
0.225, 0.0333333, 0.0625, 0.0833333,
0.225, 0.0333333, 0.1, 0.133333,
0.225, 0.0333333, 0.15, 0.2,
0.275, 0.0333333, 0.0625, 0.0833333,
0.275, 0.0333333, 0.1, 0.133333,
0.275, 0.0333333, 0.15, 0.2,
0.325, 0.0333333, 0.0625, 0.0833333,
0.325, 0.0333333, 0.1, 0.133333,
0.325, 0.0333333, 0.15, 0.2,
0.375, 0.0333333, 0.0625, 0.0833333,
0.375, 0.0333333, 0.1, 0.133333,
0.375, 0.0333333, 0.15, 0.2,
0.425, 0.0333333, 0.0625, 0.0833333,
0.425, 0.0333333, 0.1, 0.133333,
0.425, 0.0333333, 0.15, 0.2,
0.475, 0.0333333, 0.0625, 0.0833333,
0.475, 0.0333333, 0.1, 0.133333,
0.475, 0.0333333, 0.15, 0.2,
0.525, 0.0333333, 0.0625, 0.0833333,
0.525, 0.0333333, 0.1, 0.133333,
0.525, 0.0333333, 0.15, 0.2,
0.575, 0.0333333, 0.0625, 0.0833333,
0.575, 0.0333333, 0.1, 0.133333,
0.575, 0.0333333, 0.15, 0.2,
0.625, 0.0333333, 0.0625, 0.0833333,
0.625, 0.0333333, 0.1, 0.133333,
0.625, 0.0333333, 0.15, 0.2,
0.675, 0.0333333, 0.0625, 0.0833333,
0.675, 0.0333333, 0.1, 0.133333,
0.675, 0.0333333, 0.15, 0.2,
0.725, 0.0333333, 0.0625, 0.0833333,
0.725, 0.0333333, 0.1, 0.133333,
0.725, 0.0333333, 0.15, 0.2,
0.775, 0.0333333, 0.0625, 0.0833333,
0.775, 0.0333333, 0.1, 0.133333,
0.775, 0.0333333, 0.15, 0.2,
0.825, 0.0333333, 0.0625, 0.0833333,
0.825, 0.0333333, 0.1, 0.133333,
0.825, 0.0333333, 0.15, 0.2,
0.875, 0.0333333, 0.0625, 0.0833333,
0.875, 0.0333333, 0.1, 0.133333,
0.875, 0.0333333, 0.15, 0.2,
0.925, 0.0333333, 0.0625, 0.0833333,
0.925, 0.0333333, 0.1, 0.133333,
0.925, 0.0333333, 0.15, 0.2,
0.975, 0.0333333, 0.0625, 0.0833333,
0.975, 0.0333333, 0.1, 0.133333,
0.975, 0.0333333, 0.15, 0.2,
0.025, 0.1, 0.0625, 0.0833333,
0.025, 0.1, 0.1, 0.133333,
0.025, 0.1, 0.15, 0.2,
0.075, 0.1, 0.0625, 0.0833333,
0.075, 0.1, 0.1, 0.133333,
0.075, 0.1, 0.15, 0.2,
0.125, 0.1, 0.0625, 0.0833333,
0.125, 0.1, 0.1, 0.133333,
0.125, 0.1, 0.15, 0.2,
0.175, 0.1, 0.0625, 0.0833333,
0.175, 0.1, 0.1, 0.133333,
0.175, 0.1, 0.15, 0.2,
0.225, 0.1, 0.0625, 0.0833333,
0.225, 0.1, 0.1, 0.133333,
0.225, 0.1, 0.15, 0.2,
0.275, 0.1, 0.0625, 0.0833333,
0.275, 0.1, 0.1, 0.133333,
0.275, 0.1, 0.15, 0.2,
0.325, 0.1, 0.0625, 0.0833333,
0.325, 0.1, 0.1, 0.133333,
0.325, 0.1, 0.15, 0.2,
0.375, 0.1, 0.0625, 0.0833333,
0.375, 0.1, 0.1, 0.133333,
0.375, 0.1, 0.15, 0.2,
0.425, 0.1, 0.0625, 0.0833333,
0.425, 0.1, 0.1, 0.133333,
0.425, 0.1, 0.15, 0.2,
0.475, 0.1, 0.0625, 0.0833333,
0.475, 0.1, 0.1, 0.133333,
0.475, 0.1, 0.15, 0.2,
0.525, 0.1, 0.0625, 0.0833333,
0.525, 0.1, 0.1, 0.133333,
0.525, 0.1, 0.15, 0.2,
0.575, 0.1, 0.0625, 0.0833333,
0.575, 0.1, 0.1, 0.133333,
0.575, 0.1, 0.15, 0.2,
0.625, 0.1, 0.0625, 0.0833333,
0.625, 0.1, 0.1, 0.133333,
0.625, 0.1, 0.15, 0.2,
0.675, 0.1, 0.0625, 0.0833333,
0.675, 0.1, 0.1, 0.133333,
0.675, 0.1, 0.15, 0.2,
0.725, 0.1, 0.0625, 0.0833333,
0.725, 0.1, 0.1, 0.133333,
0.725, 0.1, 0.15, 0.2,
0.775, 0.1, 0.0625, 0.0833333,
0.775, 0.1, 0.1, 0.133333,
0.775, 0.1, 0.15, 0.2,
0.825, 0.1, 0.0625, 0.0833333,
0.825, 0.1, 0.1, 0.133333,
0.825, 0.1, 0.15, 0.2,
0.875, 0.1, 0.0625, 0.0833333,
0.875, 0.1, 0.1, 0.133333,
0.875, 0.1, 0.15, 0.2,
0.925, 0.1, 0.0625, 0.0833333,
0.925, 0.1, 0.1, 0.133333,
0.925, 0.1, 0.15, 0.2,
0.975, 0.1, 0.0625, 0.0833333,
0.975, 0.1, 0.1, 0.133333,
0.975, 0.1, 0.15, 0.2,
0.025, 0.166667, 0.0625, 0.0833333,
0.025, 0.166667, 0.1, 0.133333,
0.025, 0.166667, 0.15, 0.2,
0.075, 0.166667, 0.0625, 0.0833333,
0.075, 0.166667, 0.1, 0.133333,
0.075, 0.166667, 0.15, 0.2,
0.125, 0.166667, 0.0625, 0.0833333,
0.125, 0.166667, 0.1, 0.133333,
0.125, 0.166667, 0.15, 0.2,
0.175, 0.166667, 0.0625, 0.0833333,
0.175, 0.166667, 0.1, 0.133333,
0.175, 0.166667, 0.15, 0.2,
0.225, 0.166667, 0.0625, 0.0833333,
0.225, 0.166667, 0.1, 0.133333,
0.225, 0.166667, 0.15, 0.2,
0.275, 0.166667, 0.0625, 0.0833333,
0.275, 0.166667, 0.1, 0.133333,
0.275, 0.166667, 0.15, 0.2,
0.325, 0.166667, 0.0625, 0.0833333,
0.325, 0.166667, 0.1, 0.133333,
0.325, 0.166667, 0.15, 0.2,
0.375, 0.166667, 0.0625, 0.0833333,
0.375, 0.166667, 0.1, 0.133333,
0.375, 0.166667, 0.15, 0.2,
0.425, 0.166667, 0.0625, 0.0833333,
0.425, 0.166667, 0.1, 0.133333,
0.425, 0.166667, 0.15, 0.2,
0.475, 0.166667, 0.0625, 0.0833333,
0.475, 0.166667, 0.1, 0.133333,
0.475, 0.166667, 0.15, 0.2,
0.525, 0.166667, 0.0625, 0.0833333,
0.525, 0.166667, 0.1, 0.133333,
0.525, 0.166667, 0.15, 0.2,
0.575, 0.166667, 0.0625, 0.0833333,
0.575, 0.166667, 0.1, 0.133333,
0.575, 0.166667, 0.15, 0.2,
0.625, 0.166667, 0.0625, 0.0833333,
0.625, 0.166667, 0.1, 0.133333,
0.625, 0.166667, 0.15, 0.2,
0.675, 0.166667, 0.0625, 0.0833333,
0.675, 0.166667, 0.1, 0.133333,
0.675, 0.166667, 0.15, 0.2,
0.725, 0.166667, 0.0625, 0.0833333,
0.725, 0.166667, 0.1, 0.133333,
0.725, 0.166667, 0.15, 0.2,
0.775, 0.166667, 0.0625, 0.0833333,
0.775, 0.166667, 0.1, 0.133333,
0.775, 0.166667, 0.15, 0.2,
0.825, 0.166667, 0.0625, 0.0833333,
0.825, 0.166667, 0.1, 0.133333,
0.825, 0.166667, 0.15, 0.2,
0.875, 0.166667, 0.0625, 0.0833333,
0.875, 0.166667, 0.1, 0.133333,
0.875, 0.166667, 0.15, 0.2,
0.925, 0.166667, 0.0625, 0.0833333,
0.925, 0.166667, 0.1, 0.133333,
0.925, 0.166667, 0.15, 0.2,
0.975, 0.166667, 0.0625, 0.0833333,
0.975, 0.166667, 0.1, 0.133333,
0.975, 0.166667, 0.15, 0.2,
0.025, 0.233333, 0.0625, 0.0833333,
0.025, 0.233333, 0.1, 0.133333,
0.025, 0.233333, 0.15, 0.2,
0.075, 0.233333, 0.0625, 0.0833333,
0.075, 0.233333, 0.1, 0.133333,
0.075, 0.233333, 0.15, 0.2,
0.125, 0.233333, 0.0625, 0.0833333,
0.125, 0.233333, 0.1, 0.133333,
0.125, 0.233333, 0.15, 0.2,
0.175, 0.233333, 0.0625, 0.0833333,
0.175, 0.233333, 0.1, 0.133333,
0.175, 0.233333, 0.15, 0.2,
0.225, 0.233333, 0.0625, 0.0833333,
0.225, 0.233333, 0.1, 0.133333,
0.225, 0.233333, 0.15, 0.2,
0.275, 0.233333, 0.0625, 0.0833333,
0.275, 0.233333, 0.1, 0.133333,
0.275, 0.233333, 0.15, 0.2,
0.325, 0.233333, 0.0625, 0.0833333,
0.325, 0.233333, 0.1, 0.133333,
0.325, 0.233333, 0.15, 0.2,
0.375, 0.233333, 0.0625, 0.0833333,
0.375, 0.233333, 0.1, 0.133333,
0.375, 0.233333, 0.15, 0.2,
0.425, 0.233333, 0.0625, 0.0833333,
0.425, 0.233333, 0.1, 0.133333,
0.425, 0.233333, 0.15, 0.2,
0.475, 0.233333, 0.0625, 0.0833333,
0.475, 0.233333, 0.1, 0.133333,
0.475, 0.233333, 0.15, 0.2,
0.525, 0.233333, 0.0625, 0.0833333,
0.525, 0.233333, 0.1, 0.133333,
0.525, 0.233333, 0.15, 0.2,
0.575, 0.233333, 0.0625, 0.0833333,
0.575, 0.233333, 0.1, 0.133333,
0.575, 0.233333, 0.15, 0.2,
0.625, 0.233333, 0.0625, 0.0833333,
0.625, 0.233333, 0.1, 0.133333,
0.625, 0.233333, 0.15, 0.2,
0.675, 0.233333, 0.0625, 0.0833333,
0.675, 0.233333, 0.1, 0.133333,
0.675, 0.233333, 0.15, 0.2,
0.725, 0.233333, 0.0625, 0.0833333,
0.725, 0.233333, 0.1, 0.133333,
0.725, 0.233333, 0.15, 0.2,
0.775, 0.233333, 0.0625, 0.0833333,
0.775, 0.233333, 0.1, 0.133333,
0.775, 0.233333, 0.15, 0.2,
0.825, 0.233333, 0.0625, 0.0833333,
0.825, 0.233333, 0.1, 0.133333,
0.825, 0.233333, 0.15, 0.2,
0.875, 0.233333, 0.0625, 0.0833333,
0.875, 0.233333, 0.1, 0.133333,
0.875, 0.233333, 0.15, 0.2,
0.925, 0.233333, 0.0625, 0.0833333,
0.925, 0.233333, 0.1, 0.133333,
0.925, 0.233333, 0.15, 0.2,
0.975, 0.233333, 0.0625, 0.0833333,
0.975, 0.233333, 0.1, 0.133333,
0.975, 0.233333, 0.15, 0.2,
0.025, 0.3, 0.0625, 0.0833333,
0.025, 0.3, 0.1, 0.133333,
0.025, 0.3, 0.15, 0.2,
0.075, 0.3, 0.0625, 0.0833333,
0.075, 0.3, 0.1, 0.133333,
0.075, 0.3, 0.15, 0.2,
0.125, 0.3, 0.0625, 0.0833333,
0.125, 0.3, 0.1, 0.133333,
0.125, 0.3, 0.15, 0.2,
0.175, 0.3, 0.0625, 0.0833333,
0.175, 0.3, 0.1, 0.133333,
0.175, 0.3, 0.15, 0.2,
0.225, 0.3, 0.0625, 0.0833333,
0.225, 0.3, 0.1, 0.133333,
0.225, 0.3, 0.15, 0.2,
0.275, 0.3, 0.0625, 0.0833333,
0.275, 0.3, 0.1, 0.133333,
0.275, 0.3, 0.15, 0.2,
0.325, 0.3, 0.0625, 0.0833333,
0.325, 0.3, 0.1, 0.133333,
0.325, 0.3, 0.15, 0.2,
0.375, 0.3, 0.0625, 0.0833333,
0.375, 0.3, 0.1, 0.133333,
0.375, 0.3, 0.15, 0.2,
0.425, 0.3, 0.0625, 0.0833333,
0.425, 0.3, 0.1, 0.133333,
0.425, 0.3, 0.15, 0.2,
0.475, 0.3, 0.0625, 0.0833333,
0.475, 0.3, 0.1, 0.133333,
0.475, 0.3, 0.15, 0.2,
0.525, 0.3, 0.0625, 0.0833333,
0.525, 0.3, 0.1, 0.133333,
0.525, 0.3, 0.15, 0.2,
0.575, 0.3, 0.0625, 0.0833333,
0.575, 0.3, 0.1, 0.133333,
0.575, 0.3, 0.15, 0.2,
0.625, 0.3, 0.0625, 0.0833333,
0.625, 0.3, 0.1, 0.133333,
0.625, 0.3, 0.15, 0.2,
0.675, 0.3, 0.0625, 0.0833333,
0.675, 0.3, 0.1, 0.133333,
0.675, 0.3, 0.15, 0.2,
0.725, 0.3, 0.0625, 0.0833333,
0.725, 0.3, 0.1, 0.133333,
0.725, 0.3, 0.15, 0.2,
0.775, 0.3, 0.0625, 0.0833333,
0.775, 0.3, 0.1, 0.133333,
0.775, 0.3, 0.15, 0.2,
0.825, 0.3, 0.0625, 0.0833333,
0.825, 0.3, 0.1, 0.133333,
0.825, 0.3, 0.15, 0.2,
0.875, 0.3, 0.0625, 0.0833333,
0.875, 0.3, 0.1, 0.133333,
0.875, 0.3, 0.15, 0.2,
0.925, 0.3, 0.0625, 0.0833333,
0.925, 0.3, 0.1, 0.133333,
0.925, 0.3, 0.15, 0.2,
0.975, 0.3, 0.0625, 0.0833333,
0.975, 0.3, 0.1, 0.133333,
0.975, 0.3, 0.15, 0.2,
0.025, 0.366667, 0.0625, 0.0833333,
0.025, 0.366667, 0.1, 0.133333,
0.025, 0.366667, 0.15, 0.2,
0.075, 0.366667, 0.0625, 0.0833333,
0.075, 0.366667, 0.1, 0.133333,
0.075, 0.366667, 0.15, 0.2,
0.125, 0.366667, 0.0625, 0.0833333,
0.125, 0.366667, 0.1, 0.133333,
0.125, 0.366667, 0.15, 0.2,
0.175, 0.366667, 0.0625, 0.0833333,
0.175, 0.366667, 0.1, 0.133333,
0.175, 0.366667, 0.15, 0.2,
0.225, 0.366667, 0.0625, 0.0833333,
0.225, 0.366667, 0.1, 0.133333,
0.225, 0.366667, 0.15, 0.2,
0.275, 0.366667, 0.0625, 0.0833333,
0.275, 0.366667, 0.1, 0.133333,
0.275, 0.366667, 0.15, 0.2,
0.325, 0.366667, 0.0625, 0.0833333,
0.325, 0.366667, 0.1, 0.133333,
0.325, 0.366667, 0.15, 0.2,
0.375, 0.366667, 0.0625, 0.0833333,
0.375, 0.366667, 0.1, 0.133333,
0.375, 0.366667, 0.15, 0.2,
0.425, 0.366667, 0.0625, 0.0833333,
0.425, 0.366667, 0.1, 0.133333,
0.425, 0.366667, 0.15, 0.2,
0.475, 0.366667, 0.0625, 0.0833333,
0.475, 0.366667, 0.1, 0.133333,
0.475, 0.366667, 0.15, 0.2,
0.525, 0.366667, 0.0625, 0.0833333,
0.525, 0.366667, 0.1, 0.133333,
0.525, 0.366667, 0.15, 0.2,
0.575, 0.366667, 0.0625, 0.0833333,
0.575, 0.366667, 0.1, 0.133333,
0.575, 0.366667, 0.15, 0.2,
0.625, 0.366667, 0.0625, 0.0833333,
0.625, 0.366667, 0.1, 0.133333,
0.625, 0.366667, 0.15, 0.2,
0.675, 0.366667, 0.0625, 0.0833333,
0.675, 0.366667, 0.1, 0.133333,
0.675, 0.366667, 0.15, 0.2,
0.725, 0.366667, 0.0625, 0.0833333,
0.725, 0.366667, 0.1, 0.133333,
0.725, 0.366667, 0.15, 0.2,
0.775, 0.366667, 0.0625, 0.0833333,
0.775, 0.366667, 0.1, 0.133333,
0.775, 0.366667, 0.15, 0.2,
0.825, 0.366667, 0.0625, 0.0833333,
0.825, 0.366667, 0.1, 0.133333,
0.825, 0.366667, 0.15, 0.2,
0.875, 0.366667, 0.0625, 0.0833333,
0.875, 0.366667, 0.1, 0.133333,
0.875, 0.366667, 0.15, 0.2,
0.925, 0.366667, 0.0625, 0.0833333,
0.925, 0.366667, 0.1, 0.133333,
0.925, 0.366667, 0.15, 0.2,
0.975, 0.366667, 0.0625, 0.0833333,
0.975, 0.366667, 0.1, 0.133333,
0.975, 0.366667, 0.15, 0.2,
0.025, 0.433333, 0.0625, 0.0833333,
0.025, 0.433333, 0.1, 0.133333,
0.025, 0.433333, 0.15, 0.2,
0.075, 0.433333, 0.0625, 0.0833333,
0.075, 0.433333, 0.1, 0.133333,
0.075, 0.433333, 0.15, 0.2,
0.125, 0.433333, 0.0625, 0.0833333,
0.125, 0.433333, 0.1, 0.133333,
0.125, 0.433333, 0.15, 0.2,
0.175, 0.433333, 0.0625, 0.0833333,
0.175, 0.433333, 0.1, 0.133333,
0.175, 0.433333, 0.15, 0.2,
0.225, 0.433333, 0.0625, 0.0833333,
0.225, 0.433333, 0.1, 0.133333,
0.225, 0.433333, 0.15, 0.2,
0.275, 0.433333, 0.0625, 0.0833333,
0.275, 0.433333, 0.1, 0.133333,
0.275, 0.433333, 0.15, 0.2,
0.325, 0.433333, 0.0625, 0.0833333,
0.325, 0.433333, 0.1, 0.133333,
0.325, 0.433333, 0.15, 0.2,
0.375, 0.433333, 0.0625, 0.0833333,
0.375, 0.433333, 0.1, 0.133333,
0.375, 0.433333, 0.15, 0.2,
0.425, 0.433333, 0.0625, 0.0833333,
0.425, 0.433333, 0.1, 0.133333,
0.425, 0.433333, 0.15, 0.2,
0.475, 0.433333, 0.0625, 0.0833333,
0.475, 0.433333, 0.1, 0.133333,
0.475, 0.433333, 0.15, 0.2,
0.525, 0.433333, 0.0625, 0.0833333,
0.525, 0.433333, 0.1, 0.133333,
0.525, 0.433333, 0.15, 0.2,
0.575, 0.433333, 0.0625, 0.0833333,
0.575, 0.433333, 0.1, 0.133333,
0.575, 0.433333, 0.15, 0.2,
0.625, 0.433333, 0.0625, 0.0833333,
0.625, 0.433333, 0.1, 0.133333,
0.625, 0.433333, 0.15, 0.2,
0.675, 0.433333, 0.0625, 0.0833333,
0.675, 0.433333, 0.1, 0.133333,
0.675, 0.433333, 0.15, 0.2,
0.725, 0.433333, 0.0625, 0.0833333,
0.725, 0.433333, 0.1, 0.133333,
0.725, 0.433333, 0.15, 0.2,
0.775, 0.433333, 0.0625, 0.0833333,
0.775, 0.433333, 0.1, 0.133333,
0.775, 0.433333, 0.15, 0.2,
0.825, 0.433333, 0.0625, 0.0833333,
0.825, 0.433333, 0.1, 0.133333,
0.825, 0.433333, 0.15, 0.2,
0.875, 0.433333, 0.0625, 0.0833333,
0.875, 0.433333, 0.1, 0.133333,
0.875, 0.433333, 0.15, 0.2,
0.925, 0.433333, 0.0625, 0.0833333,
0.925, 0.433333, 0.1, 0.133333,
0.925, 0.433333, 0.15, 0.2,
0.975, 0.433333, 0.0625, 0.0833333,
0.975, 0.433333, 0.1, 0.133333,
0.975, 0.433333, 0.15, 0.2,
0.025, 0.5, 0.0625, 0.0833333,
0.025, 0.5, 0.1, 0.133333,
0.025, 0.5, 0.15, 0.2,
0.075, 0.5, 0.0625, 0.0833333,
0.075, 0.5, 0.1, 0.133333,
0.075, 0.5, 0.15, 0.2,
0.125, 0.5, 0.0625, 0.0833333,
0.125, 0.5, 0.1, 0.133333,
0.125, 0.5, 0.15, 0.2,
0.175, 0.5, 0.0625, 0.0833333,
0.175, 0.5, 0.1, 0.133333,
0.175, 0.5, 0.15, 0.2,
0.225, 0.5, 0.0625, 0.0833333,
0.225, 0.5, 0.1, 0.133333,
0.225, 0.5, 0.15, 0.2,
0.275, 0.5, 0.0625, 0.0833333,
0.275, 0.5, 0.1, 0.133333,
0.275, 0.5, 0.15, 0.2,
0.325, 0.5, 0.0625, 0.0833333,
0.325, 0.5, 0.1, 0.133333,
0.325, 0.5, 0.15, 0.2,
0.375, 0.5, 0.0625, 0.0833333,
0.375, 0.5, 0.1, 0.133333,
0.375, 0.5, 0.15, 0.2,
0.425, 0.5, 0.0625, 0.0833333,
0.425, 0.5, 0.1, 0.133333,
0.425, 0.5, 0.15, 0.2,
0.475, 0.5, 0.0625, 0.0833333,
0.475, 0.5, 0.1, 0.133333,
0.475, 0.5, 0.15, 0.2,
0.525, 0.5, 0.0625, 0.0833333,
0.525, 0.5, 0.1, 0.133333,
0.525, 0.5, 0.15, 0.2,
0.575, 0.5, 0.0625, 0.0833333,
0.575, 0.5, 0.1, 0.133333,
0.575, 0.5, 0.15, 0.2,
0.625, 0.5, 0.0625, 0.0833333,
0.625, 0.5, 0.1, 0.133333,
0.625, 0.5, 0.15, 0.2,
0.675, 0.5, 0.0625, 0.0833333,
0.675, 0.5, 0.1, 0.133333,
0.675, 0.5, 0.15, 0.2,
0.725, 0.5, 0.0625, 0.0833333,
0.725, 0.5, 0.1, 0.133333,
0.725, 0.5, 0.15, 0.2,
0.775, 0.5, 0.0625, 0.0833333,
0.775, 0.5, 0.1, 0.133333,
0.775, 0.5, 0.15, 0.2,
0.825, 0.5, 0.0625, 0.0833333,
0.825, 0.5, 0.1, 0.133333,
0.825, 0.5, 0.15, 0.2,
0.875, 0.5, 0.0625, 0.0833333,
0.875, 0.5, 0.1, 0.133333,
0.875, 0.5, 0.15, 0.2,
0.925, 0.5, 0.0625, 0.0833333,
0.925, 0.5, 0.1, 0.133333,
0.925, 0.5, 0.15, 0.2,
0.975, 0.5, 0.0625, 0.0833333,
0.975, 0.5, 0.1, 0.133333,
0.975, 0.5, 0.15, 0.2,
0.025, 0.566667, 0.0625, 0.0833333,
0.025, 0.566667, 0.1, 0.133333,
0.025, 0.566667, 0.15, 0.2,
0.075, 0.566667, 0.0625, 0.0833333,
0.075, 0.566667, 0.1, 0.133333,
0.075, 0.566667, 0.15, 0.2,
0.125, 0.566667, 0.0625, 0.0833333,
0.125, 0.566667, 0.1, 0.133333,
0.125, 0.566667, 0.15, 0.2,
0.175, 0.566667, 0.0625, 0.0833333,
0.175, 0.566667, 0.1, 0.133333,
0.175, 0.566667, 0.15, 0.2,
0.225, 0.566667, 0.0625, 0.0833333,
0.225, 0.566667, 0.1, 0.133333,
0.225, 0.566667, 0.15, 0.2,
0.275, 0.566667, 0.0625, 0.0833333,
0.275, 0.566667, 0.1, 0.133333,
0.275, 0.566667, 0.15, 0.2,
0.325, 0.566667, 0.0625, 0.0833333,
0.325, 0.566667, 0.1, 0.133333,
0.325, 0.566667, 0.15, 0.2,
0.375, 0.566667, 0.0625, 0.0833333,
0.375, 0.566667, 0.1, 0.133333,
0.375, 0.566667, 0.15, 0.2,
0.425, 0.566667, 0.0625, 0.0833333,
0.425, 0.566667, 0.1, 0.133333,
0.425, 0.566667, 0.15, 0.2,
0.475, 0.566667, 0.0625, 0.0833333,
0.475, 0.566667, 0.1, 0.133333,
0.475, 0.566667, 0.15, 0.2,
0.525, 0.566667, 0.0625, 0.0833333,
0.525, 0.566667, 0.1, 0.133333,
0.525, 0.566667, 0.15, 0.2,
0.575, 0.566667, 0.0625, 0.0833333,
0.575, 0.566667, 0.1, 0.133333,
0.575, 0.566667, 0.15, 0.2,
0.625, 0.566667, 0.0625, 0.0833333,
0.625, 0.566667, 0.1, 0.133333,
0.625, 0.566667, 0.15, 0.2,
0.675, 0.566667, 0.0625, 0.0833333,
0.675, 0.566667, 0.1, 0.133333,
0.675, 0.566667, 0.15, 0.2,
0.725, 0.566667, 0.0625, 0.0833333,
0.725, 0.566667, 0.1, 0.133333,
0.725, 0.566667, 0.15, 0.2,
0.775, 0.566667, 0.0625, 0.0833333,
0.775, 0.566667, 0.1, 0.133333,
0.775, 0.566667, 0.15, 0.2,
0.825, 0.566667, 0.0625, 0.0833333,
0.825, 0.566667, 0.1, 0.133333,
0.825, 0.566667, 0.15, 0.2,
0.875, 0.566667, 0.0625, 0.0833333,
0.875, 0.566667, 0.1, 0.133333,
0.875, 0.566667, 0.15, 0.2,
0.925, 0.566667, 0.0625, 0.0833333,
0.925, 0.566667, 0.1, 0.133333,
0.925, 0.566667, 0.15, 0.2,
0.975, 0.566667, 0.0625, 0.0833333,
0.975, 0.566667, 0.1, 0.133333,
0.975, 0.566667, 0.15, 0.2,
0.025, 0.633333, 0.0625, 0.0833333,
0.025, 0.633333, 0.1, 0.133333,
0.025, 0.633333, 0.15, 0.2,
0.075, 0.633333, 0.0625, 0.0833333,
0.075, 0.633333, 0.1, 0.133333,
0.075, 0.633333, 0.15, 0.2,
0.125, 0.633333, 0.0625, 0.0833333,
0.125, 0.633333, 0.1, 0.133333,
0.125, 0.633333, 0.15, 0.2,
0.175, 0.633333, 0.0625, 0.0833333,
0.175, 0.633333, 0.1, 0.133333,
0.175, 0.633333, 0.15, 0.2,
0.225, 0.633333, 0.0625, 0.0833333,
0.225, 0.633333, 0.1, 0.133333,
0.225, 0.633333, 0.15, 0.2,
0.275, 0.633333, 0.0625, 0.0833333,
0.275, 0.633333, 0.1, 0.133333,
0.275, 0.633333, 0.15, 0.2,
0.325, 0.633333, 0.0625, 0.0833333,
0.325, 0.633333, 0.1, 0.133333,
0.325, 0.633333, 0.15, 0.2,
0.375, 0.633333, 0.0625, 0.0833333,
0.375, 0.633333, 0.1, 0.133333,
0.375, 0.633333, 0.15, 0.2,
0.425, 0.633333, 0.0625, 0.0833333,
0.425, 0.633333, 0.1, 0.133333,
0.425, 0.633333, 0.15, 0.2,
0.475, 0.633333, 0.0625, 0.0833333,
0.475, 0.633333, 0.1, 0.133333,
0.475, 0.633333, 0.15, 0.2,
0.525, 0.633333, 0.0625, 0.0833333,
0.525, 0.633333, 0.1, 0.133333,
0.525, 0.633333, 0.15, 0.2,
0.575, 0.633333, 0.0625, 0.0833333,
0.575, 0.633333, 0.1, 0.133333,
0.575, 0.633333, 0.15, 0.2,
0.625, 0.633333, 0.0625, 0.0833333,
0.625, 0.633333, 0.1, 0.133333,
0.625, 0.633333, 0.15, 0.2,
0.675, 0.633333, 0.0625, 0.0833333,
0.675, 0.633333, 0.1, 0.133333,
0.675, 0.633333, 0.15, 0.2,
0.725, 0.633333, 0.0625, 0.0833333,
0.725, 0.633333, 0.1, 0.133333,
0.725, 0.633333, 0.15, 0.2,
0.775, 0.633333, 0.0625, 0.0833333,
0.775, 0.633333, 0.1, 0.133333,
0.775, 0.633333, 0.15, 0.2,
0.825, 0.633333, 0.0625, 0.0833333,
0.825, 0.633333, 0.1, 0.133333,
0.825, 0.633333, 0.15, 0.2,
0.875, 0.633333, 0.0625, 0.0833333,
0.875, 0.633333, 0.1, 0.133333,
0.875, 0.633333, 0.15, 0.2,
0.925, 0.633333, 0.0625, 0.0833333,
0.925, 0.633333, 0.1, 0.133333,
0.925, 0.633333, 0.15, 0.2,
0.975, 0.633333, 0.0625, 0.0833333,
0.975, 0.633333, 0.1, 0.133333,
0.975, 0.633333, 0.15, 0.2,
0.025, 0.7, 0.0625, 0.0833333,
0.025, 0.7, 0.1, 0.133333,
0.025, 0.7, 0.15, 0.2,
0.075, 0.7, 0.0625, 0.0833333,
0.075, 0.7, 0.1, 0.133333,
0.075, 0.7, 0.15, 0.2,
0.125, 0.7, 0.0625, 0.0833333,
0.125, 0.7, 0.1, 0.133333,
0.125, 0.7, 0.15, 0.2,
0.175, 0.7, 0.0625, 0.0833333,
0.175, 0.7, 0.1, 0.133333,
0.175, 0.7, 0.15, 0.2,
0.225, 0.7, 0.0625, 0.0833333,
0.225, 0.7, 0.1, 0.133333,
0.225, 0.7, 0.15, 0.2,
0.275, 0.7, 0.0625, 0.0833333,
0.275, 0.7, 0.1, 0.133333,
0.275, 0.7, 0.15, 0.2,
0.325, 0.7, 0.0625, 0.0833333,
0.325, 0.7, 0.1, 0.133333,
0.325, 0.7, 0.15, 0.2,
0.375, 0.7, 0.0625, 0.0833333,
0.375, 0.7, 0.1, 0.133333,
0.375, 0.7, 0.15, 0.2,
0.425, 0.7, 0.0625, 0.0833333,
0.425, 0.7, 0.1, 0.133333,
0.425, 0.7, 0.15, 0.2,
0.475, 0.7, 0.0625, 0.0833333,
0.475, 0.7, 0.1, 0.133333,
0.475, 0.7, 0.15, 0.2,
0.525, 0.7, 0.0625, 0.0833333,
0.525, 0.7, 0.1, 0.133333,
0.525, 0.7, 0.15, 0.2,
0.575, 0.7, 0.0625, 0.0833333,
0.575, 0.7, 0.1, 0.133333,
0.575, 0.7, 0.15, 0.2,
0.625, 0.7, 0.0625, 0.0833333,
0.625, 0.7, 0.1, 0.133333,
0.625, 0.7, 0.15, 0.2,
0.675, 0.7, 0.0625, 0.0833333,
0.675, 0.7, 0.1, 0.133333,
0.675, 0.7, 0.15, 0.2,
0.725, 0.7, 0.0625, 0.0833333,
0.725, 0.7, 0.1, 0.133333,
0.725, 0.7, 0.15, 0.2,
0.775, 0.7, 0.0625, 0.0833333,
0.775, 0.7, 0.1, 0.133333,
0.775, 0.7, 0.15, 0.2,
0.825, 0.7, 0.0625, 0.0833333,
0.825, 0.7, 0.1, 0.133333,
0.825, 0.7, 0.15, 0.2,
0.875, 0.7, 0.0625, 0.0833333,
0.875, 0.7, 0.1, 0.133333,
0.875, 0.7, 0.15, 0.2,
0.925, 0.7, 0.0625, 0.0833333,
0.925, 0.7, 0.1, 0.133333,
0.925, 0.7, 0.15, 0.2,
0.975, 0.7, 0.0625, 0.0833333,
0.975, 0.7, 0.1, 0.133333,
0.975, 0.7, 0.15, 0.2,
0.025, 0.766667, 0.0625, 0.0833333,
0.025, 0.766667, 0.1, 0.133333,
0.025, 0.766667, 0.15, 0.2,
0.075, 0.766667, 0.0625, 0.0833333,
0.075, 0.766667, 0.1, 0.133333,
0.075, 0.766667, 0.15, 0.2,
0.125, 0.766667, 0.0625, 0.0833333,
0.125, 0.766667, 0.1, 0.133333,
0.125, 0.766667, 0.15, 0.2,
0.175, 0.766667, 0.0625, 0.0833333,
0.175, 0.766667, 0.1, 0.133333,
0.175, 0.766667, 0.15, 0.2,
0.225, 0.766667, 0.0625, 0.0833333,
0.225, 0.766667, 0.1, 0.133333,
0.225, 0.766667, 0.15, 0.2,
0.275, 0.766667, 0.0625, 0.0833333,
0.275, 0.766667, 0.1, 0.133333,
0.275, 0.766667, 0.15, 0.2,
0.325, 0.766667, 0.0625, 0.0833333,
0.325, 0.766667, 0.1, 0.133333,
0.325, 0.766667, 0.15, 0.2,
0.375, 0.766667, 0.0625, 0.0833333,
0.375, 0.766667, 0.1, 0.133333,
0.375, 0.766667, 0.15, 0.2,
0.425, 0.766667, 0.0625, 0.0833333,
0.425, 0.766667, 0.1, 0.133333,
0.425, 0.766667, 0.15, 0.2,
0.475, 0.766667, 0.0625, 0.0833333,
0.475, 0.766667, 0.1, 0.133333,
0.475, 0.766667, 0.15, 0.2,
0.525, 0.766667, 0.0625, 0.0833333,
0.525, 0.766667, 0.1, 0.133333,
0.525, 0.766667, 0.15, 0.2,
0.575, 0.766667, 0.0625, 0.0833333,
0.575, 0.766667, 0.1, 0.133333,
0.575, 0.766667, 0.15, 0.2,
0.625, 0.766667, 0.0625, 0.0833333,
0.625, 0.766667, 0.1, 0.133333,
0.625, 0.766667, 0.15, 0.2,
0.675, 0.766667, 0.0625, 0.0833333,
0.675, 0.766667, 0.1, 0.133333,
0.675, 0.766667, 0.15, 0.2,
0.725, 0.766667, 0.0625, 0.0833333,
0.725, 0.766667, 0.1, 0.133333,
0.725, 0.766667, 0.15, 0.2,
0.775, 0.766667, 0.0625, 0.0833333,
0.775, 0.766667, 0.1, 0.133333,
0.775, 0.766667, 0.15, 0.2,
0.825, 0.766667, 0.0625, 0.0833333,
0.825, 0.766667, 0.1, 0.133333,
0.825, 0.766667, 0.15, 0.2,
0.875, 0.766667, 0.0625, 0.0833333,
0.875, 0.766667, 0.1, 0.133333,
0.875, 0.766667, 0.15, 0.2,
0.925, 0.766667, 0.0625, 0.0833333,
0.925, 0.766667, 0.1, 0.133333,
0.925, 0.766667, 0.15, 0.2,
0.975, 0.766667, 0.0625, 0.0833333,
0.975, 0.766667, 0.1, 0.133333,
0.975, 0.766667, 0.15, 0.2,
0.025, 0.833333, 0.0625, 0.0833333,
0.025, 0.833333, 0.1, 0.133333,
0.025, 0.833333, 0.15, 0.2,
0.075, 0.833333, 0.0625, 0.0833333,
0.075, 0.833333, 0.1, 0.133333,
0.075, 0.833333, 0.15, 0.2,
0.125, 0.833333, 0.0625, 0.0833333,
0.125, 0.833333, 0.1, 0.133333,
0.125, 0.833333, 0.15, 0.2,
0.175, 0.833333, 0.0625, 0.0833333,
0.175, 0.833333, 0.1, 0.133333,
0.175, 0.833333, 0.15, 0.2,
0.225, 0.833333, 0.0625, 0.0833333,
0.225, 0.833333, 0.1, 0.133333,
0.225, 0.833333, 0.15, 0.2,
0.275, 0.833333, 0.0625, 0.0833333,
0.275, 0.833333, 0.1, 0.133333,
0.275, 0.833333, 0.15, 0.2,
0.325, 0.833333, 0.0625, 0.0833333,
0.325, 0.833333, 0.1, 0.133333,
0.325, 0.833333, 0.15, 0.2,
0.375, 0.833333, 0.0625, 0.0833333,
0.375, 0.833333, 0.1, 0.133333,
0.375, 0.833333, 0.15, 0.2,
0.425, 0.833333, 0.0625, 0.0833333,
0.425, 0.833333, 0.1, 0.133333,
0.425, 0.833333, 0.15, 0.2,
0.475, 0.833333, 0.0625, 0.0833333,
0.475, 0.833333, 0.1, 0.133333,
0.475, 0.833333, 0.15, 0.2,
0.525, 0.833333, 0.0625, 0.0833333,
0.525, 0.833333, 0.1, 0.133333,
0.525, 0.833333, 0.15, 0.2,
0.575, 0.833333, 0.0625, 0.0833333,
0.575, 0.833333, 0.1, 0.133333,
0.575, 0.833333, 0.15, 0.2,
0.625, 0.833333, 0.0625, 0.0833333,
0.625, 0.833333, 0.1, 0.133333,
0.625, 0.833333, 0.15, 0.2,
0.675, 0.833333, 0.0625, 0.0833333,
0.675, 0.833333, 0.1, 0.133333,
0.675, 0.833333, 0.15, 0.2,
0.725, 0.833333, 0.0625, 0.0833333,
0.725, 0.833333, 0.1, 0.133333,
0.725, 0.833333, 0.15, 0.2,
0.775, 0.833333, 0.0625, 0.0833333,
0.775, 0.833333, 0.1, 0.133333,
0.775, 0.833333, 0.15, 0.2,
0.825, 0.833333, 0.0625, 0.0833333,
0.825, 0.833333, 0.1, 0.133333,
0.825, 0.833333, 0.15, 0.2,
0.875, 0.833333, 0.0625, 0.0833333,
0.875, 0.833333, 0.1, 0.133333,
0.875, 0.833333, 0.15, 0.2,
0.925, 0.833333, 0.0625, 0.0833333,
0.925, 0.833333, 0.1, 0.133333,
0.925, 0.833333, 0.15, 0.2,
0.975, 0.833333, 0.0625, 0.0833333,
0.975, 0.833333, 0.1, 0.133333,
0.975, 0.833333, 0.15, 0.2,
0.025, 0.9, 0.0625, 0.0833333,
0.025, 0.9, 0.1, 0.133333,
0.025, 0.9, 0.15, 0.2,
0.075, 0.9, 0.0625, 0.0833333,
0.075, 0.9, 0.1, 0.133333,
0.075, 0.9, 0.15, 0.2,
0.125, 0.9, 0.0625, 0.0833333,
0.125, 0.9, 0.1, 0.133333,
0.125, 0.9, 0.15, 0.2,
0.175, 0.9, 0.0625, 0.0833333,
0.175, 0.9, 0.1, 0.133333,
0.175, 0.9, 0.15, 0.2,
0.225, 0.9, 0.0625, 0.0833333,
0.225, 0.9, 0.1, 0.133333,
0.225, 0.9, 0.15, 0.2,
0.275, 0.9, 0.0625, 0.0833333,
0.275, 0.9, 0.1, 0.133333,
0.275, 0.9, 0.15, 0.2,
0.325, 0.9, 0.0625, 0.0833333,
0.325, 0.9, 0.1, 0.133333,
0.325, 0.9, 0.15, 0.2,
0.375, 0.9, 0.0625, 0.0833333,
0.375, 0.9, 0.1, 0.133333,
0.375, 0.9, 0.15, 0.2,
0.425, 0.9, 0.0625, 0.0833333,
0.425, 0.9, 0.1, 0.133333,
0.425, 0.9, 0.15, 0.2,
0.475, 0.9, 0.0625, 0.0833333,
0.475, 0.9, 0.1, 0.133333,
0.475, 0.9, 0.15, 0.2,
0.525, 0.9, 0.0625, 0.0833333,
0.525, 0.9, 0.1, 0.133333,
0.525, 0.9, 0.15, 0.2,
0.575, 0.9, 0.0625, 0.0833333,
0.575, 0.9, 0.1, 0.133333,
0.575, 0.9, 0.15, 0.2,
0.625, 0.9, 0.0625, 0.0833333,
0.625, 0.9, 0.1, 0.133333,
0.625, 0.9, 0.15, 0.2,
0.675, 0.9, 0.0625, 0.0833333,
0.675, 0.9, 0.1, 0.133333,
0.675, 0.9, 0.15, 0.2,
0.725, 0.9, 0.0625, 0.0833333,
0.725, 0.9, 0.1, 0.133333,
0.725, 0.9, 0.15, 0.2,
0.775, 0.9, 0.0625, 0.0833333,
0.775, 0.9, 0.1, 0.133333,
0.775, 0.9, 0.15, 0.2,
0.825, 0.9, 0.0625, 0.0833333,
0.825, 0.9, 0.1, 0.133333,
0.825, 0.9, 0.15, 0.2,
0.875, 0.9, 0.0625, 0.0833333,
0.875, 0.9, 0.1, 0.133333,
0.875, 0.9, 0.15, 0.2,
0.925, 0.9, 0.0625, 0.0833333,
0.925, 0.9, 0.1, 0.133333,
0.925, 0.9, 0.15, 0.2,
0.975, 0.9, 0.0625, 0.0833333,
0.975, 0.9, 0.1, 0.133333,
0.975, 0.9, 0.15, 0.2,
0.025, 0.966667, 0.0625, 0.0833333,
0.025, 0.966667, 0.1, 0.133333,
0.025, 0.966667, 0.15, 0.2,
0.075, 0.966667, 0.0625, 0.0833333,
0.075, 0.966667, 0.1, 0.133333,
0.075, 0.966667, 0.15, 0.2,
0.125, 0.966667, 0.0625, 0.0833333,
0.125, 0.966667, 0.1, 0.133333,
0.125, 0.966667, 0.15, 0.2,
0.175, 0.966667, 0.0625, 0.0833333,
0.175, 0.966667, 0.1, 0.133333,
0.175, 0.966667, 0.15, 0.2,
0.225, 0.966667, 0.0625, 0.0833333,
0.225, 0.966667, 0.1, 0.133333,
0.225, 0.966667, 0.15, 0.2,
0.275, 0.966667, 0.0625, 0.0833333,
0.275, 0.966667, 0.1, 0.133333,
0.275, 0.966667, 0.15, 0.2,
0.325, 0.966667, 0.0625, 0.0833333,
0.325, 0.966667, 0.1, 0.133333,
0.325, 0.966667, 0.15, 0.2,
0.375, 0.966667, 0.0625, 0.0833333,
0.375, 0.966667, 0.1, 0.133333,
0.375, 0.966667, 0.15, 0.2,
0.425, 0.966667, 0.0625, 0.0833333,
0.425, 0.966667, 0.1, 0.133333,
0.425, 0.966667, 0.15, 0.2,
0.475, 0.966667, 0.0625, 0.0833333,
0.475, 0.966667, 0.1, 0.133333,
0.475, 0.966667, 0.15, 0.2,
0.525, 0.966667, 0.0625, 0.0833333,
0.525, 0.966667, 0.1, 0.133333,
0.525, 0.966667, 0.15, 0.2,
0.575, 0.966667, 0.0625, 0.0833333,
0.575, 0.966667, 0.1, 0.133333,
0.575, 0.966667, 0.15, 0.2,
0.625, 0.966667, 0.0625, 0.0833333,
0.625, 0.966667, 0.1, 0.133333,
0.625, 0.966667, 0.15, 0.2,
0.675, 0.966667, 0.0625, 0.0833333,
0.675, 0.966667, 0.1, 0.133333,
0.675, 0.966667, 0.15, 0.2,
0.725, 0.966667, 0.0625, 0.0833333,
0.725, 0.966667, 0.1, 0.133333,
0.725, 0.966667, 0.15, 0.2,
0.775, 0.966667, 0.0625, 0.0833333,
0.775, 0.966667, 0.1, 0.133333,
0.775, 0.966667, 0.15, 0.2,
0.825, 0.966667, 0.0625, 0.0833333,
0.825, 0.966667, 0.1, 0.133333,
0.825, 0.966667, 0.15, 0.2,
0.875, 0.966667, 0.0625, 0.0833333,
0.875, 0.966667, 0.1, 0.133333,
0.875, 0.966667, 0.15, 0.2,
0.925, 0.966667, 0.0625, 0.0833333,
0.925, 0.966667, 0.1, 0.133333,
0.925, 0.966667, 0.15, 0.2,
0.975, 0.966667, 0.0625, 0.0833333,
0.975, 0.966667, 0.1, 0.133333,
0.975, 0.966667, 0.15, 0.2,
0.05, 0.0666667, 0.2, 0.266667,
0.05, 0.0666667, 0.3, 0.4,
0.15, 0.0666667, 0.2, 0.266667,
0.15, 0.0666667, 0.3, 0.4,
0.25, 0.0666667, 0.2, 0.266667,
0.25, 0.0666667, 0.3, 0.4,
0.35, 0.0666667, 0.2, 0.266667,
0.35, 0.0666667, 0.3, 0.4,
0.45, 0.0666667, 0.2, 0.266667,
0.45, 0.0666667, 0.3, 0.4,
0.55, 0.0666667, 0.2, 0.266667,
0.55, 0.0666667, 0.3, 0.4,
0.65, 0.0666667, 0.2, 0.266667,
0.65, 0.0666667, 0.3, 0.4,
0.75, 0.0666667, 0.2, 0.266667,
0.75, 0.0666667, 0.3, 0.4,
0.85, 0.0666667, 0.2, 0.266667,
0.85, 0.0666667, 0.3, 0.4,
0.95, 0.0666667, 0.2, 0.266667,
0.95, 0.0666667, 0.3, 0.4,
0.05, 0.2, 0.2, 0.266667,
0.05, 0.2, 0.3, 0.4,
0.15, 0.2, 0.2, 0.266667,
0.15, 0.2, 0.3, 0.4,
0.25, 0.2, 0.2, 0.266667,
0.25, 0.2, 0.3, 0.4,
0.35, 0.2, 0.2, 0.266667,
0.35, 0.2, 0.3, 0.4,
0.45, 0.2, 0.2, 0.266667,
0.45, 0.2, 0.3, 0.4,
0.55, 0.2, 0.2, 0.266667,
0.55, 0.2, 0.3, 0.4,
0.65, 0.2, 0.2, 0.266667,
0.65, 0.2, 0.3, 0.4,
0.75, 0.2, 0.2, 0.266667,
0.75, 0.2, 0.3, 0.4,
0.85, 0.2, 0.2, 0.266667,
0.85, 0.2, 0.3, 0.4,
0.95, 0.2, 0.2, 0.266667,
0.95, 0.2, 0.3, 0.4,
0.05, 0.333333, 0.2, 0.266667,
0.05, 0.333333, 0.3, 0.4,
0.15, 0.333333, 0.2, 0.266667,
0.15, 0.333333, 0.3, 0.4,
0.25, 0.333333, 0.2, 0.266667,
0.25, 0.333333, 0.3, 0.4,
0.35, 0.333333, 0.2, 0.266667,
0.35, 0.333333, 0.3, 0.4,
0.45, 0.333333, 0.2, 0.266667,
0.45, 0.333333, 0.3, 0.4,
0.55, 0.333333, 0.2, 0.266667,
0.55, 0.333333, 0.3, 0.4,
0.65, 0.333333, 0.2, 0.266667,
0.65, 0.333333, 0.3, 0.4,
0.75, 0.333333, 0.2, 0.266667,
0.75, 0.333333, 0.3, 0.4,
0.85, 0.333333, 0.2, 0.266667,
0.85, 0.333333, 0.3, 0.4,
0.95, 0.333333, 0.2, 0.266667,
0.95, 0.333333, 0.3, 0.4,
0.05, 0.466667, 0.2, 0.266667,
0.05, 0.466667, 0.3, 0.4,
0.15, 0.466667, 0.2, 0.266667,
0.15, 0.466667, 0.3, 0.4,
0.25, 0.466667, 0.2, 0.266667,
0.25, 0.466667, 0.3, 0.4,
0.35, 0.466667, 0.2, 0.266667,
0.35, 0.466667, 0.3, 0.4,
0.45, 0.466667, 0.2, 0.266667,
0.45, 0.466667, 0.3, 0.4,
0.55, 0.466667, 0.2, 0.266667,
0.55, 0.466667, 0.3, 0.4,
0.65, 0.466667, 0.2, 0.266667,
0.65, 0.466667, 0.3, 0.4,
0.75, 0.466667, 0.2, 0.266667,
0.75, 0.466667, 0.3, 0.4,
0.85, 0.466667, 0.2, 0.266667,
0.85, 0.466667, 0.3, 0.4,
0.95, 0.466667, 0.2, 0.266667,
0.95, 0.466667, 0.3, 0.4,
0.05, 0.6, 0.2, 0.266667,
0.05, 0.6, 0.3, 0.4,
0.15, 0.6, 0.2, 0.266667,
0.15, 0.6, 0.3, 0.4,
0.25, 0.6, 0.2, 0.266667,
0.25, 0.6, 0.3, 0.4,
0.35, 0.6, 0.2, 0.266667,
0.35, 0.6, 0.3, 0.4,
0.45, 0.6, 0.2, 0.266667,
0.45, 0.6, 0.3, 0.4,
0.55, 0.6, 0.2, 0.266667,
0.55, 0.6, 0.3, 0.4,
0.65, 0.6, 0.2, 0.266667,
0.65, 0.6, 0.3, 0.4,
0.75, 0.6, 0.2, 0.266667,
0.75, 0.6, 0.3, 0.4,
0.85, 0.6, 0.2, 0.266667,
0.85, 0.6, 0.3, 0.4,
0.95, 0.6, 0.2, 0.266667,
0.95, 0.6, 0.3, 0.4,
0.05, 0.733333, 0.2, 0.266667,
0.05, 0.733333, 0.3, 0.4,
0.15, 0.733333, 0.2, 0.266667,
0.15, 0.733333, 0.3, 0.4,
0.25, 0.733333, 0.2, 0.266667,
0.25, 0.733333, 0.3, 0.4,
0.35, 0.733333, 0.2, 0.266667,
0.35, 0.733333, 0.3, 0.4,
0.45, 0.733333, 0.2, 0.266667,
0.45, 0.733333, 0.3, 0.4,
0.55, 0.733333, 0.2, 0.266667,
0.55, 0.733333, 0.3, 0.4,
0.65, 0.733333, 0.2, 0.266667,
0.65, 0.733333, 0.3, 0.4,
0.75, 0.733333, 0.2, 0.266667,
0.75, 0.733333, 0.3, 0.4,
0.85, 0.733333, 0.2, 0.266667,
0.85, 0.733333, 0.3, 0.4,
0.95, 0.733333, 0.2, 0.266667,
0.95, 0.733333, 0.3, 0.4,
0.05, 0.866667, 0.2, 0.266667,
0.05, 0.866667, 0.3, 0.4,
0.15, 0.866667, 0.2, 0.266667,
0.15, 0.866667, 0.3, 0.4,
0.25, 0.866667, 0.2, 0.266667,
0.25, 0.866667, 0.3, 0.4,
0.35, 0.866667, 0.2, 0.266667,
0.35, 0.866667, 0.3, 0.4,
0.45, 0.866667, 0.2, 0.266667,
0.45, 0.866667, 0.3, 0.4,
0.55, 0.866667, 0.2, 0.266667,
0.55, 0.866667, 0.3, 0.4,
0.65, 0.866667, 0.2, 0.266667,
0.65, 0.866667, 0.3, 0.4,
0.75, 0.866667, 0.2, 0.266667,
0.75, 0.866667, 0.3, 0.4,
0.85, 0.866667, 0.2, 0.266667,
0.85, 0.866667, 0.3, 0.4,
0.95, 0.866667, 0.2, 0.266667,
0.95, 0.866667, 0.3, 0.4,
0.05, 1, 0.2, 0.266667,
0.05, 1, 0.3, 0.4,
0.15, 1, 0.2, 0.266667,
0.15, 1, 0.3, 0.4,
0.25, 1, 0.2, 0.266667,
0.25, 1, 0.3, 0.4,
0.35, 1, 0.2, 0.266667,
0.35, 1, 0.3, 0.4,
0.45, 1, 0.2, 0.266667,
0.45, 1, 0.3, 0.4,
0.55, 1, 0.2, 0.266667,
0.55, 1, 0.3, 0.4,
0.65, 1, 0.2, 0.266667,
0.65, 1, 0.3, 0.4,
0.75, 1, 0.2, 0.266667,
0.75, 1, 0.3, 0.4,
0.85, 1, 0.2, 0.266667,
0.85, 1, 0.3, 0.4,
0.95, 1, 0.2, 0.266667,
0.95, 1, 0.3, 0.4,
0.1, 0.133333, 0.4, 0.533333,
0.1, 0.133333, 0.6, 0.8,
0.3, 0.133333, 0.4, 0.533333,
0.3, 0.133333, 0.6, 0.8,
0.5, 0.133333, 0.4, 0.533333,
0.5, 0.133333, 0.6, 0.8,
0.7, 0.133333, 0.4, 0.533333,
0.7, 0.133333, 0.6, 0.8,
0.9, 0.133333, 0.4, 0.533333,
0.9, 0.133333, 0.6, 0.8,
0.1, 0.4, 0.4, 0.533333,
0.1, 0.4, 0.6, 0.8,
0.3, 0.4, 0.4, 0.533333,
0.3, 0.4, 0.6, 0.8,
0.5, 0.4, 0.4, 0.533333,
0.5, 0.4, 0.6, 0.8,
0.7, 0.4, 0.4, 0.533333,
0.7, 0.4, 0.6, 0.8,
0.9, 0.4, 0.4, 0.533333,
0.9, 0.4, 0.6, 0.8,
0.1, 0.666667, 0.4, 0.533333,
0.1, 0.666667, 0.6, 0.8,
0.3, 0.666667, 0.4, 0.533333,
0.3, 0.666667, 0.6, 0.8,
0.5, 0.666667, 0.4, 0.533333,
0.5, 0.666667, 0.6, 0.8,
0.7, 0.666667, 0.4, 0.533333,
0.7, 0.666667, 0.6, 0.8,
0.9, 0.666667, 0.4, 0.533333,
0.9, 0.666667, 0.6, 0.8,
0.1, 0.933333, 0.4, 0.533333,
0.1, 0.933333, 0.6, 0.8,
0.3, 0.933333, 0.4, 0.533333,
0.3, 0.933333, 0.6, 0.8,
0.5, 0.933333, 0.4, 0.533333,
0.5, 0.933333, 0.6, 0.8,
0.7, 0.933333, 0.4, 0.533333,
0.7, 0.933333, 0.6, 0.8,
0.9, 0.933333, 0.4, 0.533333,
0.9, 0.933333, 0.6, 0.8,
0.2, 0.266667, 0.8, 1,
0.2, 0.266667, 1, 1,
0.2, 0.266667, 1, 1,
0.6, 0.266667, 0.8, 1,
0.6, 0.266667, 1, 1,
0.6, 0.266667, 1, 1,
1, 0.266667, 0.8, 1,
1, 0.266667, 1, 1,
1, 0.266667, 1, 1,
0.2, 0.8, 0.8, 1,
0.2, 0.8, 1, 1,
0.2, 0.8, 1, 1,
0.6, 0.8, 0.8, 1,
0.6, 0.8, 1, 1,
0.6, 0.8, 1, 1,
1, 0.8, 0.8, 1,
1, 0.8, 1, 1,
1, 0.8, 1, 1,
};



int m_num_anchors = SSD_NUM_PRIORS;
int m_topk = SSD_NUM_MAX_TARGETS;
float m_conf_threshold = 0.7f;
float m_iou_threshold = 0.5f;

const float center_variance = 0.1;
const float size_variance = 0.2;
int m_image_h = 120;
int m_image_w = 160;

#define clip(x, y) (x < 0 ? 0 : (x > y ? y : x))

short generateBBox(TfLiteTensor* model_output[], FaceInfo out_boxes[]) {

    int8_t* bbox_value = model_output[0]->data.int8;
    int8_t* score_value = model_output[1]->data.int8;

#if WITH_YAW_AND_LANDMARKS
    int8_t* landmarks_value = model_output[0]->data.int8;
    bbox_value                = model_output[1]->data.int8;
    int8_t* yaw_value        = model_output[2]->data.int8;
    score_value                = model_output[3]->data.int8;
#elif WITH_YAW
    int8_t* yaw_value = model_output[2]->data.int8;
#endif

    float score;
    short out_boxes_i = 0;
    float x_center, y_center, w, h;
    float yaw;
    float landmarks_x, landmarks_y;

#if WITH_YAW_AND_LANDMARKS
    for (int i = 0; i < m_num_anchors; i++) {
        score = ((float)score_value[2 * i + 1] - model_output[3]->params.zero_point) * model_output[3]->params.scale;
        yaw = ((float)yaw_value[i] - model_output[2]->params.zero_point) * model_output[2]->params.scale;

        //info("i= %d, score = %f, yaw = %f ,score_scale = %f \n",i,score,yaw,model_output[3]->params.scale);

        if (score > m_conf_threshold) {
            FaceInfo rect = {};
            x_center = ((float)bbox_value[i * 4] - model_output[1]->params.zero_point) * model_output[1]->params.scale * center_variance * ssd::priors_arr[i][2] + ssd::priors_arr[i][0];
            y_center = ((float)bbox_value[i * 4 + 1] - model_output[1]->params.zero_point) * model_output[1]->params.scale * center_variance * ssd::priors_arr[i][3] + ssd::priors_arr[i][1];
            w = exp(((float)bbox_value[i * 4 + 2] - model_output[1]->params.zero_point) * model_output[1]->params.scale * size_variance) * ssd::priors_arr[i][2];
            h = exp(((float)bbox_value[i * 4 + 3] - model_output[1]->params.zero_point) * model_output[1]->params.scale * size_variance) * ssd::priors_arr[i][3];

            rect.x1 = (short)(clip(x_center - w / 2.0, 1) * m_image_w);
            rect.y1 = (short)(clip(y_center - h / 2.0, 1) * m_image_h);
            rect.x2 = (short)(clip(x_center + w / 2.0, 1) * m_image_w);
            rect.y2 = (short)(clip(y_center + h / 2.0, 1) * m_image_h);

            rect.score = clip(score, 1);
            rect.yaw = int(round(yaw * 90));

            for (size_t l_i = 0; l_i < 5; l_i++) {
                landmarks_x = ((float)landmarks_value[i * 10 + 2 * l_i] - model_output[0]->params.zero_point) * model_output[0]->params.scale * center_variance * ssd::priors_arr[i][2] + ssd::priors_arr[i][0];
                landmarks_y = ((float)landmarks_value[i * 10 + 2 * l_i + 1] - model_output[0]->params.zero_point) * model_output[0]->params.scale * center_variance * ssd::priors_arr[i][3] + ssd::priors_arr[i][1];
                rect.landmarks[2 * l_i] = round(clip(landmarks_x, 1.0) * m_image_w);
                rect.landmarks[2 * l_i + 1] = round(clip(landmarks_y, 1.0) * m_image_h);
            }

            out_boxes[out_boxes_i++] = rect;

            if (out_boxes_i == SSD_NUM_MAX_TARGETS)
                break;
        }
    }

    return out_boxes_i;
#else
    for (int i = 0; i < m_num_anchors; i++) {
        score = ((float)score_value[2 * i + 1] - model_output[1]->params.zero_point) * model_output[1]->params.scale;
#if WITH_YAW
        yaw = ((float)yaw_value[i] - model_output[2]->params.zero_point) * model_output[2]->params.scale;
#endif
        if (score > m_conf_threshold) {
            FaceInfo rect = { 0 };
            x_center = ((float)bbox_value[i * 4] - model_output[0]->params.zero_point) * model_output[0]->params.scale * center_variance * ssd::priors_arr[i][2] + ssd::priors_arr[i][0];
            y_center = ((float)bbox_value[i * 4 + 1] - model_output[0]->params.zero_point) * model_output[0]->params.scale * center_variance * ssd::priors_arr[i][3] + ssd::priors_arr[i][1];
            w = exp(((float)bbox_value[i * 4 + 2] - model_output[0]->params.zero_point) * model_output[0]->params.scale * size_variance) * ssd::priors_arr[i][2];
            h = exp(((float)bbox_value[i * 4 + 3] - model_output[0]->params.zero_point) * model_output[0]->params.scale * size_variance) * ssd::priors_arr[i][3];

            rect.x1 = (short)(clip(x_center - w / 2.0, 1) * m_image_w);
            rect.y1 = (short)(clip(y_center - h / 2.0, 1) * m_image_h);
            rect.x2 = (short)(clip(x_center + w / 2.0, 1) * m_image_w);
            rect.y2 = (short)(clip(y_center + h / 2.0, 1) * m_image_h);

            rect.score = clip(score, 1);
#if WITH_YAW
            rect.yaw = int(round(yaw * 90));
#endif
            out_boxes[out_boxes_i++] = rect;

            if (out_boxes_i == SSD_NUM_MAX_TARGETS)
                break;
        }
    }

    return out_boxes_i;
#endif // WITH_YAW_AND_LANDMARKS
} //generateBBox



short nms(FaceInfo *input_boxes, short num_input_boxes, FaceInfo output_boxes[]) {
    //possible bug with sizeof here!!
    std::sort(input_boxes, input_boxes + num_input_boxes, [](const FaceInfo &a, const FaceInfo &b) { return a.score > b.score; });

    int box_num = num_input_boxes;

    std::vector<int> merged(box_num, 0);

    short num_detections = 0;

    for (int i = 0; i < box_num; i++) {
        if (merged[i])
            continue;

        std::vector<FaceInfo> buf(box_num, FaceInfo());
        short buf_i = 0;
        buf[buf_i++] = input_boxes[i];
        merged[i] = 1;

        short h0 = input_boxes[i].y2 - input_boxes[i].y1 + 1;
        short w0 = input_boxes[i].x2 - input_boxes[i].x1 + 1;

        int area0 = h0 * w0;

        for (int j = i + 1; j < box_num; j++) {
            if (merged[j])
                continue;

            short inner_x0 = input_boxes[i].x1 > input_boxes[j].x1 ? input_boxes[i].x1 : input_boxes[j].x1;
            short inner_y0 = input_boxes[i].y1 > input_boxes[j].y1 ? input_boxes[i].y1 : input_boxes[j].y1;

            short inner_x1 = input_boxes[i].x2 < input_boxes[j].x2 ? input_boxes[i].x2 : input_boxes[j].x2;
            short inner_y1 = input_boxes[i].y2 < input_boxes[j].y2 ? input_boxes[i].y2 : input_boxes[j].y2;

            short inner_h = inner_y1 - inner_y0 + 1;
            short inner_w = inner_x1 - inner_x0 + 1;

            if (inner_h <= 0 || inner_w <= 0)
                continue;

            int inner_area = inner_h * inner_w;

            short h1 = input_boxes[j].y2 - input_boxes[j].y1 + 1;
            short w1 = input_boxes[j].x2 - input_boxes[j].x1 + 1;

            int area1 = h1 * w1;

            float iou = inner_area / (float)(area0 + area1 - inner_area);

            if (iou > m_iou_threshold) {
                merged[j] = 1;
                buf[buf_i++] = input_boxes[j];
            }
        }
        output_boxes[num_detections++] = buf[0];

        if (num_detections == m_topk)
            break;
    }

    return num_detections;
} //nms


void DrawBoxSSD(uint8_t* imgIn, int imWidth, int imHeight, int boxX,int boxY, int boxWidth, int boxHeight,int channelsImageDisplayed)
{
    auto CheckAndFixOffset = [](int im_width,int im_height,int& offset,int color_channels) {
        if ( (offset) >= im_width*im_height*color_channels) {
            offset = im_width * im_height * color_channels -1;
        }
        else if ( (offset) < 0) {
            offset = 0;
        }
    };

    /* Consistency checks */
    if (!imgIn) {
        return;
    }

    int offset=0;
    for (int i=0; i < boxWidth; i++) {
        /* Draw two horizontal lines */
        for (int line=0; line < 2; line++) {
            /*top*/
            offset =(i + (boxY + line)*imWidth + boxX) * channelsImageDisplayed + 2; /* channelsImageDisplayed for rgb or grayscale*/
            CheckAndFixOffset(imWidth,imHeight,offset,channelsImageDisplayed);
            offset -= 2;
            imgIn[offset+0] = 0x00;
            imgIn[offset+1] = 0x00;
            imgIn[offset+2] = 0xFF;
            /*bottom*/
            offset = (i + (boxY + boxHeight - line)*imWidth + boxX) * channelsImageDisplayed  + 2;
            CheckAndFixOffset(imWidth,imHeight,offset,channelsImageDisplayed);
            offset -= 2;
            imgIn[offset+0] = 0x00;
            imgIn[offset+1] = 0x00;
            imgIn[offset+2] = 0xFF;
        }
    }

    for (int i=0; i < boxHeight; i++) {
        /* Draw two vertical lines */
        for (int line=0; line < 2; line++) {
            /*left*/
            offset = ((i + boxY)*imWidth + boxX + line)*channelsImageDisplayed  + 2;
            CheckAndFixOffset(imWidth,imHeight,offset,channelsImageDisplayed);
            offset -= 2;
            imgIn[offset+0] = 0x00;
            imgIn[offset+1] = 0x00;
            imgIn[offset+2] = 0xFF;
            /*right*/
            offset = ((i + boxY)*imWidth + boxX + boxWidth - line)*channelsImageDisplayed  + 2;
            CheckAndFixOffset(imWidth,imHeight, offset,channelsImageDisplayed);
            offset -= 2;
            imgIn[offset+0] = 0x00;
            imgIn[offset+1] = 0x00;
            imgIn[offset+2] = 0xFF;
        }
    }

} //DrawBoxSSD


void DrawFullBoxSSD(uint8_t* imgIn, int imWidth, int imHeight, int boxX,int boxY, int boxWidth, int boxHeight,int channelsImageDisplayed)
{
    auto CheckAndFixOffset = [](int im_width,int im_height,int& offset,int color_channels) {
        if ( (offset) >= im_width*im_height*color_channels) {
            offset = im_width * im_height * color_channels -1;
        }
        else if ( (offset) < 0) {
            offset = 0;
        }
    };


    if (boxWidth < 0) {
        boxWidth = -boxWidth;
        boxX = boxX - boxWidth;
    }

    if (boxHeight < 0) {
        boxHeight = -boxHeight;
        boxY = boxY - boxHeight;
    }

    /* Consistency checks */
    if (!imgIn) {
        return;
    }

    int offset=0;
    for (int i=0; i < boxWidth; i++) {
        /* Draw two horizontal lines */
        for (int line=0; line < boxHeight; line++) {
            /*top*/
            offset =(i + (boxY + line)*imWidth + boxX) * channelsImageDisplayed; /* channelsImageDisplayed for rgb or grayscale*/
            CheckAndFixOffset(imWidth,imHeight,offset,channelsImageDisplayed);
            imgIn[offset+1] = (0xFF); //Buggy
        }
    }

} //DrawFullBoxSSD

void DrawFullBoxSSDColor(uint8_t* imgIn, int imWidth, int imHeight, int boxX,int boxY, int boxWidth, int boxHeight,EmzaColor color )
{
    auto CheckAndFixOffset = [](int im_width,int im_height,int& offset,int color_channels) {
        if ( (offset) >= im_width*im_height*color_channels) {
            offset = im_width * im_height * color_channels -1;
        }
        else if ( (offset) < 0) {
            offset = 0;
        }
    };


    if (boxWidth < 0) {
        boxWidth = -boxWidth;
        boxX = boxX - boxWidth;
    }

    if (boxHeight < 0) {
        boxHeight = -boxHeight;
        boxY = boxY - boxHeight;
    }

    /* Consistency checks */
    if (!imgIn) {
        return;
    }

    int offset=0;
    int channelsImageDisplayed = 3;
    for (int i=0; i < boxWidth; i++) {
        /* Draw two horizontal lines */
        for (int line=0; line < boxHeight; line++) {
            /*top*/
            offset =(i + (boxY + line)*imWidth + boxX) * channelsImageDisplayed + 2; /* channelsImageDisplayed for rgb or grayscale*/
            CheckAndFixOffset(imWidth,imHeight,offset,channelsImageDisplayed);
            imgIn[offset+0] = color.b;
            imgIn[offset+1] = color.g;
            imgIn[offset+2] = color.r;
        }
    }

} //DrawFullBoxSSDColor


EmzaColor landmarks_colors[5] = {
    {255, 0,   0},
    {0,   0,   255},
    {0,   255, 0},
    {255, 255, 0},
    {255, 0,   255}
    };

//void drawLandmarksAndYaw(uint8_t* srcPtr,int srcHeight, int srcWidth,
//                                    FaceInfo *face_list, int n_faces,int n_channels,float scale_factor)
//{
//    for (int i = 0; i < n_faces; i++)
//        {
//            FaceInfo const& face = face_list[i];
//            short x1 = scale_factor*face.x1;
//            short y1 = scale_factor*face.y1;
//            short x2 = scale_factor*face.x2;
//            short y2 = scale_factor*face.y2;
//
//            short w = (x2 - x1 + 1);
//            short h = (y2 - y1 + 1);
//            DrawBoxSSD(srcPtr, srcWidth, srcHeight, x1, y1, w, h,n_channels);
//            //yaw
//            DrawFullBoxSSD(srcPtr, srcWidth, srcHeight, x1 + w/2, y1, w*face.yaw/100.0, 3,n_channels);
//            //confidence
//            DrawFullBoxSSD(srcPtr, srcWidth, srcHeight, x1, y1 + h, 3, -h*face.score,n_channels);
//        }
//} //drawLandmarksAndYaw


void drawLandmarksAndYaw(uint8_t* srcPtr,int srcHeight, int srcWidth,
                                    FaceInfo *face_list, int n_faces,int n_channels,float scale_factor)
{
    for (int i = 0; i < n_faces; i++)
        {
            FaceInfo const& face = face_list[i];
			short x1 = scale_factor*face.x1;
			short y1 = scale_factor*face.y1;
			short x2 = scale_factor*face.x2;
			short y2 = scale_factor*face.y2;

            short w = x2 - x1 + 1;
            short h = y2 - y1 + 1;
            //bounding box
            DrawBoxSSD(srcPtr, srcWidth, srcHeight, x1, y1, w, h,n_channels);
            //yaw
            EmzaColor curr_color={0,   255, 255};//{0x7F,0x7F,0x7F};
            DrawFullBoxSSDColor(srcPtr, srcWidth, srcHeight, x1 + w/2, y1+h, -w/1.2*face.yaw/100.0, 7,curr_color);
            //confidence
            //DrawFullBoxSSD(srcPtr, srcWidth, srcHeight, x1, y1 + h, 3, -h*face.score,n_channels);

            //landmarks
            for (int j = 0; j < 5; j++) {
            //    short landmarks[10]; // (x,y ... ,x,y)
            short lx = scale_factor*face.landmarks[2*j];
            short ly = scale_factor*face.landmarks[2*j+1];

            curr_color = landmarks_colors[j];//{0xFF,0xFF,0xFF};
            DrawFullBoxSSDColor(srcPtr, srcWidth, srcHeight, lx-1, ly-6, 4,4,curr_color);
            } //for j
        } //for i
} //drawLandmarksAndYaw

} /* namespace ssd */


} /* namespace app */
} /* namespace arm */




